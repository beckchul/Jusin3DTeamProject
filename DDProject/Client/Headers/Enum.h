#ifndef Enum_h__
#define Enum_h__

enum SCENEID { SCENE_STATIC, SCENE_LOGO, SCENE_MENU, SCENE_MENU_TO_STAGE, SCENE_LOBBY, SCENE_STAGE, SCENE_STAGE2,
	TESTSCENE_SUENGHO, TESTSCENE_SEOCHAN, TESTSCENE_BACKCHUL, TESTSCENE_MINKYEONG,
	TESTSCENE_SUENGHO2, TESTSCENE_SEOCHAN2, TESTSCENE_BACKCHUL2, TESTSCENE_MINKYEONG2,
	SCENE_END };

enum PLAYER_INDEX { PLAYER_UNKNOWN, PLAYER_1, PLAYER_2, PLAYER_3, PLAYER_4, PLAYER_INDEX_END };

enum OBSERVER_MESSAGE {
	// Player
	MESSAGE_PLAYER_INFO, MESSAGE_PLAYER_DELETE, MESSAGE_PLAYER_MP, MESSAGE_PLAYER_NEAR_CRYSTAL,
	
	// LastMan
	MESSAGE_LASTMAN_INFO, MESSAGE_LASTMAN_DELETE, MESSAGE_LASTMAN_COMPUTER_ADD, MESSAGE_LASTMAN_COMPUTER_DEAD, MESSAGE_LASTMAN_PLAYER_ADD, MESSAGE_LASTMAN_PLAYER_DEAD,

	// Scene
	MESSAGE_SCENECHANGE,

	// Wave
	MESSAGE_PHASECHANGE, MESSAGE_BUILD_PHASECHANGE, MESSACE_CUTSCENE, MESSAGE_BOSS_HP, MESSAGE_BOSS_APPEAR, MESSAGE_STAGE_CLEAR,

	// Monster Count
	MESSAGE_PLUSCOUNT, MESSAGE_MINUSCOUNT, MESSAGE_MAX_UNITCOUNT,
};

enum PLAYER_TYPE { PLAYER_MAGE, PLAYER_MONK, PLAYER_HUNTRESS, PLAYER_TYPE_END};

enum TOWER_TYPE { TOWER_TYPE_SLOWAURA, TOWER_TYPE_LIGHTNINGAURA, TOWER_TYPE_HEALINGAURA, TOWER_TYPE_DRAINAURA, TOWER_TYPE_ENRAGEAURA,
	TOWER_TYPE_FIRE, TOWER_TYPE_MISSILE, TOWER_TYPE_LIGHTNING, TOWER_TYPE_STRIKER, TOWER_TYPE_BLOCKADE,
	TOWER_TYPE_END,
};

enum SKILL_TYPE {
	SKILL_0, SKILL_1, SKILL_2, SKILL_3, SKILL_4, SKILL_5, SKILL_6, SKILL_7, SKILL_8, SKILL_9, SKILL_END
};

enum SHADER_UI_PASS { UI_ALPHATEST, UI_ALPHABLEND, UI_DARKREMOVE, UI_DARKREMOVEALPHATEST, UI_DARKREMOVECOLORMULTIPLY, UI_ALPHAMULTIPLY, UI_ALPHATESETBLEND,
	UI_COLORMULTIPLY, UI_TOWERRADIUS, UI_MASK, UI_MERGE, UI_BaseColor};

enum CAMERA_TYPE {CAMERA_STATIC, CAMERA_DYNAMIC, CAMERA_RECORDING, CAMERA_ACTION, CAMERA_TOWER, CAMERA_SUMMON, CAMERA_STAND, CAMERA_FLOAT, CAMERA_GOBLIN, CAMERA_VICTORY, CAMERA_END};

enum CUTSCENE_TYPE { CUTSCENE_MENU, CUTSCENE_MENU2, CUTSCENE_STAGE, CUTSCENE_STAGE_2, CUTSCENE_BOSS, CUTSCENE_LOBBY, CUTSCENE_END};

enum PHASE_TYPE {BUILD_PHASE, COMBAT_PHASE, WAVE_COMPLETE, PHASE_END};

enum DIGITS { // ÀÚ¸´¼ö(¼ýÀÚ)
	DIGITS_1, DIGITS_2, DIGITS_3, DIGITS_4, DIGITS_5, DIGITS_END
};

enum MISSILE_TYPE { MONK_MISSILE, MAGE_MISSILE, MAGE_TOWER_MISSILE, MAGE_TOWER_STRIKER, MISSILE_TYPE_END, };

enum SPLASH_TYPE { MAGE_SPLASH_ATTACK, MAGE_MANA_BOMB_SPLASH_ATTACK
	, MAGE_LIGHTNING_TOWER_ATTACK, MAGE_FIRETOWER_SPLASH_ATTACK, KOBOLD_SPLASH_ATTACK, DEMON_SPLASH_MISSLIE, DEMON_SPLASH_ATTACK, SPLASH_TYPE_END };

enum AURA_TYPE {SLOW_AURA, HEAL_AURA, ENLARGE_AURA, AURA_END};		// Minkyeong

enum PLAYER_MAIN_STATE
{
	PLAYER_IDLE,
	PLAYER_MOVE,
	PLAYER_TURN,
	PLAYER_JUMP,
	PLAYER_JUMP_FALLING,
	PLAYER_ATTACK,
	PLAYER_ATTACK_SECOND,
	PLAYER_ATTACK_THIRD,
	PLAYER_ATTACK_FOURTH,
	PLAYER_JUMP_ATTACK,
	PLAYER_JUMP_ATTACK_SECOND,
	PLAYER_JUMP_ATTACK_THIRD,
	PLAYER_JUMP_ATTACK_FOURTH,
	PLAYER_JUMP_FALLING_ATTACK,
	PLAYER_JUMP_FALLING_ATTACK_SECOND,
	PLAYER_JUMP_FALLING_ATTACK_THIRD,
	PLAYER_JUMP_FALLING_ATTACK_FOURTH,
	PLAYER_SKILL,
	PLAYER_SKILL_ATTACK,
	PLAYER_HURT,
	PLAYER_HEAL,
	PLAYER_DEAD,
	PLAYER_INPUT,
	PLAYER_NOT_INPUT,
	PLAYER_RESPONE,
	// Tower
	PLAYER_TOWER_PREVIEW,
	PLAYER_TOWER_PREVIEW_SECOND,
	PLAYER_TOWER_SUMMONING,
	PLAYER_TOWER_CANCEL,
	PLAYER_TOWER_BUILD,

	PLAYER_END,
};

enum ePlayer_MageRenderState
{
	MAGE_IDLE,
	MAGE_IDLE_LOWHEALTH,
	MAGE_MOVE_BACKWARD,
	MAGE_MOVE_LEFT,
	MAGE_MOVE_RIGHT,
	MAGE_TRUN_LEFT,
	MAGE_RUN_FORWARD,
	MAGE_JUMP,
	MAGE_JUMP_FALLING,
	MAGE_SPAWN,
	MAGE_HURT,
	MAGE_DEATH,
	MAGE_HEAL,
	MAGE_PICKUP_ITEM,
	MAGE_CALL_OUT,
	MAGE_LEVELUP,
	MAGE_WAVE_START,
	MAGE_LOSE,
	MAGE_WIN,
	MAGE_WIN_WAVE,
	MAGE_FIRE,
	MAGE_FIRE_MAXPOWER,
	MAGE_CHARGE_MIN,
	MAGE_CHARGE_MIN_KNOCKBACK,
	MAGE_CHARGE_MAX,
	MAGE_CHARGE_MAX_KNOCKBACK,
	MAGE_DETONATE,
	MAGE_KNOCKBACK,
	MAGE_MANA_BOMB,
	MAGE_REPAIR,
	MAGE_SUMMON,
	MAGE_SUMMON_PLACE,
	MAGE_SUMMON_START,
	MAGE_SUMMON_STOP,
	MAGE_UPGRADE,
	MAGE_STATE_END
};

#define MAGE_STATE ePlayer_MageRenderState

enum ePlayer_MonkRenderState
{
	MONK_IDLE,
	MONK_IDLE_LOWHEALTH,
	MONK_MOVE_BACKWARD,
	MONK_MOVE_LEFT,
	MONK_MOVE_RIGHT,
	MONK_RUN_FORWARD,
	MONK_TRUN_LEFT,
	MONK_JUMP,
	MONK_JUMP_FALLING,
	MONK_SPAWN,
	MONK_HURT,
	MONK_DEATH,
	MONK_HEAL,
	MONK_PICKUP_ITEM,
	MONK_CALL_OUT,
	MONK_LEVEL_UP,
	MONK_WAVE_START,
	MONK_LOSE,
	MONK_WIN,
	MONK_WIN_WAVE,
	MONK_MELLE_ATTACK1,
	MONK_MELLE_ATTACK2,
	MONK_MELLE_ATTACK3,
	MONK_FIRE,
	MONK_SUMMON,
	MONK_SUMMON_PLACE,
	MONK_SUMMON_STOP,
	MONK_REPAIR,
	MONK_UPGRADE,
	MONK_ACTIVEHEROBOOST,
	MONK_ACTIVETOWERBOOST,
	MONK_DETONATE,
	MONK_STATE_END,
};

#define MONK_STATE ePlayer_MonkRenderState


enum ePlayer_HuntressState
{
	HUNTRESS_IDLE,
	HUNTRESS_ACTIVATEINVISIBILITY,
	HUNTRESS_CALLOUT,
	HUNTRESS_DEATH,
	HUNTRESS_DETONATE,
	HUNTRESS_FIRE,
	HUNTRESS_HEAL,
	HUNTERSS_HURT,
	HUNTRESS_IDLE_LOWHEALTH,
	HUNTRESS_JUMP,
	HUNTRESS_JUMP_FALLING,
	HUNTRESS_LEVELUP,
	HUNTRESS_LOSE,
	HUNTRESS_PICKUPITEM,
	HUNTRESS_RELOAD,
	HUNTRESS_REPAIR,
	HUNTRESS_RUN_BACKWARDS,
	HUNTRESS_RUN_FORWARD,
	HUNTRESS_RUN_LEFT,
	HUNTRESS_RUN_RIGHT,
	HUNTRESS_SPAWN,
	HUNTRESS_SUMMON,
	HUNTRESS_SUMMON_PLACE,
	HUNTRESS_START,
	HUNTRESS_STOP,
	HUNTRESS_TURN_RIGHT,
	HUNTRESS_UPGRADE,
	HUNTRESS_WAVESTART,
	HUNTRESS_WIN,
	HUNTRESS_WINWAVE,
	HUNTRESS_END
};

#define HUNTRESS_STATE ePlayer_HuntressState


enum MONSTER_MAIN_STATE
{
	MONSTER_IDLE,
	MONSTER_MOVE,
	MONSTER_MOVE_LEFT,
	MONSTER_MOVE_RIGHT,
	MONSTER_BACK_MOVE,
	MONSTER_TURN,
	MONSTER_JUMP,
	MONSTER_JUMP_FALLING,
	MONSTER_ATTACK,
	MONSTER_ATTACK_2,
	MONSTER_ATTACK_3,
	MONSTER_ATTACK_4,
	MONSTER_ATTACK_5,
	MONSTER_ATTACK_6,
	MONSTER_HURT,
	MONSTER_SORK,
	MONSTER_FLY,
	MONSTER_CINEMATIC_LANDING,
	MONSTER_CINEMATIC_END,
	MONSTER_DEAD,
	MONSTER_END,
};


enum MONSTER_HURT_STATE
{
	MONSTER_NORMAL,
	MONSTER_ENRAGE,
};

enum MONSTER_TURN_CAHCK
{
	MONSTER_TURN_LEFT,
	MONSTER_TURN_RIGHT,
	MONSTER_TURN_FINISH,
	MONSTER_TURN_END,
};

enum eMonster_GoblinRenderState
{
	GOBLIN_IDLE,
	GOBLIN_MOVE_FORWARD,
	GOBLIN_TURN_LEFT,
	GOBLIN_JUMP,
	GOBLIN_HURT,
	GOBLIN_SHOCK,
	GOBLIN_DEATH,
	GOBLIN_COUGH,
	GOBLIN_ATTACK,
	GOBLIN_ATTACK_1,
	GOBLIN_STATE_END,
};

#define GOBLIN_STATE eMonster_GoblinRenderState

enum eMonster_OrcBruiserState
{
	ORCBRUISER_IDLE,
	ORCBRUISER_MOVE_FORWARD,
	ORCBRUISER_TURN,
	ORCBRUISER_JUMP,
	ORCBRUISER_SHOCK,
	ORCBRUISER_DEATH,
	ORCBRUISER_COUGH,
	ORCBRUISER_ATTACK1,
	ORCBRUISER_ATTACK2,
	ORCBRUISER_STATE_END,
};

#define ORCBRUISER_STATE eMonster_OrcBruiserState


enum eMonster_KoboldState
{
	KOBOLD_IDLE,
	KOBOLD_MOVE_FORWARD,
	KOBOLD_MOVE_BACKWORD,
	KOBOLD_TURN,
	KOBOLD_JUMP,
	KOBOLD_HURT,
	KOBOLD_DEATH,
	KOBOLD_COUGH,
	KOBOLD_RUN_SUICIDE,
	KOBOLD_SHOCK,
	KOBOLD_LIGHTFUSE,
	KOBOLD_STATE_END
};

#define KOBOLD_STATE eMonster_KoboldState

enum eMonster_DarkElfArcherState
{
	DARKELFARCHER_IDLE,
	DARKELFARCHER_MOVE_FORWARD,
	DARKELFARCHER_BACKWARD,
	DARKELFARCHER_MOVE_LEFT,
	DARKELFARCHER_MOVE_RIGHT,
	DARKELFARCHER_TURN,
	DARKELFARCHER_JUMP,
	DARKELFARCHER_HURT,
	DARKELFARCHER_SHOCK,
	DARKELFARCHER_DEATH,
	DARKELFARCHER_COUGH,
	DARKELFARCHER_ATTACK,
	DARKELFARCHER_STATE_END,
};

#define DARKELFARCHER_STATE eMonster_DarkElfArcherState

enum eMonster_DemonState
{
	DEMON_IDLE,
	DEMON_ATTACK_POUND,
	DEMON_ATTACK_LEFT,
	DEMON_TURN_LEFT,
	DEMON_SHORK_GROUND,
	DEMON_SHORK_AIR,
	DEMON_MOVE_FORWARD,
	DEMON_HURT,
	DEMON_FLY_RIGHT,
	DEMON_FLY_POUND_LOOP,
	DEMON_FLY_POUND_END,
	DEMON_FLY_LEFT,
	DEMON_FLY_LAUNCH,
	DEMON_FLY_HOVER,
	DEMON_FLY_FORWARD,
	DEMON_FLY_FIREBALL,
	DEMON_FLY_BACKWARD,
	DEMON_DEATH,
	DEMON_CINEMATIC_LANDING,
	DEMON_CINEMATIC_CUTTHROAT,
	DEMON_ATTACK_SUMMONFLAME,
	DEMON_ATTACK_SLICE,
	DEMON_ATTACK_RIGHT,
	DEMON_STATE_END,
};

#define DEMON_STATE eMonster_DemonState

enum TOWER_STATE
{
	TOWER_IDLE,
	TOWER_FIRE,
	TOWER_END,
};

enum eDoor_State
{
	DOOR_OPENING,
	DOOR_OPEN,
	DOOR_IDLE,
	DOOR_CLOSING,
	DOOR_CLOSED,
	DOOR_END
};


#endif // Enum_h__