#ifndef Engine_Enum_h__
#define Engine_Enum_h__

namespace Engine
{
	enum ANGLE { ANGLE_X, ANGLE_Y, ANGLE_Z, ANGLE_END};

	//서버-클라 통신용 메세지 추가
	enum eNETMSG
	{
		NETMSG_SERVER_SET_INDEX,			// 플레이어 생성할때 인덱스 세팅용(서버 전용)
		NETMSG_CLIENT_CREATE_PLAYER,		// 해당 클라이언트외의 다른 클라이언트의 플레이어를 생성하기 위해 서버에 요청(클라이언트 전용)

		// 플레이어 메세지
		NETMSG_SERVER_CREATE_PLAYER,		// 플레이어 생성메세지(서버전용)
		NETMSG_SERVER_DELETE_PLAYER,		// 플레이어 접속 종료시 플레이어 삭제(서버 전용)

		NETMSG_SERVER_PLAYER_UPDATE,		// 클라이언트로부터 받은 상태를 다른 클라로 업데이트해주는 메세지(서버 전용)
		NETMSG_CLIENT_PLAYER_UPDATE,		// 플레이어 상태변경 게시(클라이언트 전용)

		NETMSG_SERVER_PLAYER_UPDATE2,		// 클라이언트로부터 받은 상태를 다른 클라로 업데이트해주는 메세지(서버 전용)
		NETMSG_CLIENT_PLAYER_UPDATE2,		// 플레이어 상태변경 게시(클라이언트 전용)

		// 채팅용 메세지
		NETMSG_CLIENT_SEND_CHATTING,		// 채팅 생성 메세지(클라이언트 전용)
		NETMSG_SERVER_SEND_CHATTING,		// 채팅 생성 메세지(서버 전용)

		NETMSG_CLIENT_SEND_ID,				// 아이디 생성 메세지(클라이언트 전용)
		NETMSG_SERVER_SEND_ID,				// 아이디 생성 메세지(서버 전용)

		// 타워용 메세지
		NETMSG_CLINET_UPDATE_TOWER,			// 타워 정보 서버로 보내기(클라이언트 전용)
		NETMSG_SERVER_UPDATE_TOWER,			// 타워 정보 다른 클라들에게 보내기(서버 전용)

		// 전투 준비용 메세지
		NETMSG_CLIENT_READY_COMBAT,			// 어떤 플레이어가 준비 완료 했는지(클라이언트 전용)
		NETMSG_SERVER_START_COMBAT,			// 전투를 시작하라는 메세지(서버 전용)

		// 플레이어 교환 메세지
		NETMSG_CLIENT_CHANGE_PLAYER,
		NETMSG_SERVER_CHANGE_PLAYER,

		// 데칼
		NETMSG_CLIENT_DECAL,
		NETMSG_SERVER_DECAL,

		// Stage2 상태
		NETMSG_CLINET_ROUND2_STATE,
		NETMSG_SERVER_ROUND2_STATE,

		// Stage2 KillingMessage
		NETMSG_CLINET_KILL,
		NETMSG_SERVER_KILL,

		NETMSG_END
	};

	// Sound Channel
	enum CHANNEL_TYPE {
		CHANNEL_LOGO, 
		CHANNEL_MENU, CHANNEL_GAMESTART,
		CHANNEL_WAVE,
		CHANNEL_STAGE, CHANNEL_CRYSTAL_ACTIVATE, CHANNEL_GATE_SLAMLARGE, CHANNEL_PRESENT, CHANNEL_TRESUREBOX,
		CHANNEL_MAGE, CHANNEL_MONK, CHANNEL_GOLBIN, CHANNEL_DARKELF, CHANNEL_ORC, CHANNEL_KOBOLD, CHANNEL_DEMON,
		CHANNEL_MONSTER_ATTACK, CHANNEL_MONSTER_ATTACK2, CHANNEL_MONSTER_ATTACK3,
		CHANNEL_NORMAL_ATTACK, CHANNEL_MAGE_SKILL, CHANNEL_MAGE_SKILL2,
		CHANNEL_TOWER, CHANNEL_TOWER_2, CHANNEL_TOWER_3, CHANNEL_TOWER_ATTACK, CHANNEL_TOWER_ATTACK_2,
		CHANNEL_STAGE2,

		CHANNEL_END
		
	};

	// 오브젝트(MapTool 연동)
	enum OBJECTID {
		OBJECT_TRESUREBOX, OBJECT_LEFT_DOOR, OBJECT_RIGHT_DOOR,
		OBJECT_CRYSTAL, OBJECT_ACCESSORY1, OBJECT_ACCESSORY2, OBJECT_CRYSTALLIGHT,
		OBJECT_POINT_LIGHT0, OBJECT_POINT_LIGHT1, OBJECT_POINT_LIGHT2, OBJECT_POINT_LIGHT3, OBJECT_POINT_LIGHT4, OBJECT_POINT_LIGHT5,
		OBJECT_MONSTER_ROUTE0, OBJECT_MONSTER_ROUTE1, OBJECT_MONSTER_ROUTE2,
		OBJECT_MONSTER_ROUTE3, OBJECT_MONSTER_ROUTE4, OBJECT_MONSTER_ROUTE5,
		OBJECT_MONSTER_ROUTE6, OBJECT_MONSTER_ROUTE7,
		OBJECT_END
	};

	enum OBJECT2ID2 {
		OBJECT2_TRESUREBOX, OBJECT2_SPAWNER,
		OBJECT2_CRYSTAL, OBJECT2_ACCESSORY1, OBJECT2_ACCESSORY2,
		OBJECT2_POINT_LIGHT0, OBJECT2_POINT_LIGHT1, OBJECT2_POINT_LIGHT2, OBJECT2_POINT_LIGHT3, OBJECT2_POINT_LIGHT4,
		OBJECT2_MONSTER_ROUTE0, OBJECT2_MONSTER_ROUTE1, OBJECT2_MONSTER_ROUTE2,
		OBJECT2_MONSTER_ROUTE3, OBJECT2_MONSTER_ROUTE4, OBJECT2_MONSTER_ROUTE5,
		OBJECT2_MONSTER_ROUTE6, OBJECT2_MONSTER_ROUTE7,
		OBJECT2_END
	};

	enum OBJECT2ID3 {
		OBJECT3_TRESUREBOX,
		OBJECT3_CRYSTAL, OBJECT3_ACCESSORY1, OBJECT3_ACCESSORY2,
		OBJECT3_POINT_LIGHT0, OBJECT3_POINT_LIGHT1, OBJECT3_POINT_LIGHT2, OBJECT3_POINT_LIGHT3, OBJECT3_POINT_LIGHT4,
		OBJECT3_END
	};

	// 내비메쉬 옵션
	enum NAV_OPTION {
		NAV_PLAYER_COLLISION, NAV_TOWER_ENABLE, NAV_WALL, NAV_SECOND_FLOOR,
		NAV_UPFLOOR, NAV_DROP, NAV_NOPASSAGE, NAV_DEATH, NAV_OPTION_END
	};

	// 몬스터 종류
	enum MONSTER_TYPE { MONSTER_GOBLIN, MONSTER_DARKELF, MONSTER_ORC, MONSTER_KOBOLD, MONSTER_DEMON, MONSTER_TYPE_END };

	enum LASTMAN_PROGRESS { LASTMAN_WAIT, // 맨 처음 대기중
							
							// 시작 대기중(20초),	 라운드 본격적 시작,							
							LASTMAN_ROUND_WAIT,		LASTMAN_ROUND_START, 
		
							// 자기장 준비				  // 자기장 활성화
							LASTMAN_ROUND_ELECTRIC_READY, LASTMAN_ROUND_ELECTRIC_ACTIVATE,
		
							//승자가 가려짐
							LASTMAN_ROUND_FINISH,
	};
}

#endif // Engine_Enum_h__
